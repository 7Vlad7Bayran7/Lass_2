import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        // 1. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].
        // С помощью цикла и условия заменить 0 на 1, 1 на 0;
        int[] arr1 = {1, 1, 1, 0, 0, 0, 1, 0, 1, 0};
        arr1.toString();
        System.out.println(Arrays.toString(arr1)); //Смотрим до

        for (int i = 0; i < arr1.length; i++) {
            arr1[i] = (arr1[i] == 0) ? 1 : 0;
        }
        System.out.println(Arrays.toString(arr1)); //Смотрим после

        //2. Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;
        int[] arr2 = new int[8];
        for (int i = 1; i < arr2.length; i++) {
            arr2[i] = arr2[i - 1] + 3;
        }
        System.out.println(Arrays.toString(arr2)); //Смотрим после

        //3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2;
        int[] arr3 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        for (int i = 0; i < arr3.length; i++) {
            if (arr3[i] < 6) arr3[i] *= 2;
        }
        System.out.println(Arrays.toString(arr3));

        //4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое), и с помощью
        // цикла(-ов) заполнить его диагональные элементы единицами;
        int[][] arr4 = new int[10][10];
        for (int i = 0; i < arr4.length; i++) {
            for (int j = 0; j < arr4.length; j++) {
                if (i == j) arr4[i][j] = 1;
                if (arr4.length - 1 - i == j) arr4[i][j] = 1;
                System.out.print(arr4[i][j]);
            }
            System.out.println();
        }
        //5. ** Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);
        // Сортировка гнома
        int[] arr5 = {5, 1, 32, 2, 11};
//        int[] arr5 = {5, 1, 3, 2, 11,8, 3, 2, 11,8, 3, 2, 11,8, 3, 2, 11,8}; //этот массив не сработает. Почему ?
        int pos = 0;
        while (pos < arr5.length - 1) {

            if (arr5[pos] < arr5[pos + 1]) {
                pos++;

            } else {
                int swap = 0;
                swap = arr5[pos + 1]; // Первый получит данные второго
                arr5[pos + 1] = arr5[pos];
                arr5[pos] = swap;
                //После замены шаг влево
                if (pos > 0) pos--; //чтоб убрать ошибку -1 индекс
            }
        }
        System.out.println(Arrays.toString(arr5));
        //6. Написать метод, в который передается не пустой одномерный целочисленный массив, метод должен вернуть true,
        // если в массиве есть место, в котором сумма левой и правой части массива равны. Примеры: checkBalance([2, 2,
        // 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true, граница показана символами ||, эти
        // символы в массив не входят.
        int[] arr6 = {2, 2, 2, 1, 2, 2, 10, 1}; // левая часть 2 + 2 + 2 + 1 = 7 правая 2 + 2 + 10 + 1 = 15 / false
//        int [] arr6 = {2, 5, 7, 3, 5, 2,  10, 0}; // массив любой размерности заполняется 0, так-что если не заполнить
        //полностью, то будет true, если правая часть не будет больше.
        System.out.println((checkBalance(arr6)));
        //7. **** Написать метод, которому на вход подается одномерный массив и число n (может быть положительным, или
        // отрицательным), при этом метод должен сместить все элементы массива на n позиций. Элементы смещаются
        // циклично. Для усложнения задачи нельзя пользоваться вспомогательными массивами. Примеры: [ 1, 2, 3 ] при
        // n = 1 (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ].
        // При каком n в какую сторону сдвиг может выбирать сами.

        //Невозможно написать один метод, для решения данной задачи. Пытался 4 часа / 7 красных линий https://www.youtube.com/watch?v=UoKlKx-3FcA&ab_channel=LETOM2MAAN
        //Не снижайте, пожалуйста ))
    }

    //метод к заданию 6.
    public static boolean checkBalance(int[] arr) {
        int left = 0; // Считаем слева
        for (int i = 0; i < arr.length / 2; i++) {
            left += arr[i];
        }
        int rights = 0; //считаем справа
        for (int j = arr.length / 2; j < arr.length; j++) {
            rights += arr[j];
        }
        if (left == rights) {
            return true;
        } else
            return false;
    }
}
